{
  "title": "Projets",
  "personal": {
    "heading": "Mes Projets Personnels",
    "publicRepos": "{{count}} dépôts publics",
    "followers":   "{{count}} followers",
    "stars":       "{{count}} étoiles",
    "description": "Découvrez mes réalisations personnelles, disponibles sur mon profil GitHub."
  },
  "list": {
    "seeDetails": "Détails",
    "repo":       "Dépôt GitHub",
    "demo":       "Voir la démo"
  },
  "detail": {
    "description":           "Description",
    "codeDistribution":      "Répartition du code",
    "subSkills":             "Sous-compétences",
    "gallery":               "Galerie",
    "technicalDetails":      "Détails techniques",
    "history":               "Historique",
    "architecture":          "Architecture",
    "technicalChoices":      "Choix techniques",
    "technicalReflections":  "Réflexions techniques",
    "difficulties":          "Difficultés",
    "close":                 "Fermer"
  },
  "space-invaders": {
    "title": "Space Invaders",
    "summary": "Recréation du jeu classique Space Invaders.",
    "description": "Une version moderne de Space Invaders avec graphismes améliorés, animations fluides et scores en ligne.",
    "history": "Développé en 2023 lors d’un hackathon interne, puis maintenu en projet personnel.",
    "architecture": "Monolithe TS Vanille : boucle principale séparée des gestionnaires d’entrée et de rendu.",
    "technicalChoices": "Utilisation de HTML5 Canvas pour performance et compatibilité, sans framework tiers.",
    "technicalReflections": "Architecture modulaire TS facilitant l’ajout de nouvelles entités (ennemis, power-ups).",
    "difficulties": "Gestion de la physique basique et des collisions pour maintenir un framerate stable."
  },
  "custom-logger": {
    "title": "Custom Logger",
    "summary": "Package NPM modulaire de journalisation pour Node.js, configurable et extensible.",
    "description": "Module TypeScript pour journalisation centralisée : niveaux (TRACE à ERROR), hiérarchie main/sub-process, styles colorés ou classiques, API fluent. S’intègre dans toute app Node.js et s’enrichit de nouveaux transports.",
    "history": "Créé le 28 février 2024 et publié sur NPM (v0.1.11) pour expérimenter un logger modulaire en TypeScript.",
    "architecture": "Mono-package singleton `LoggingService` orchestrant plusieurs services (ProcessDatabase, StyleManager…), avec clients Main/SubProcess héritant d’une base abstraite.",
    "technicalChoices": "– Pattern Singleton pour le service global ; \n– Composition de petits services pour séparer les responsabilités ; \n– Enums et interfaces TS pour la cohérence ; \n– Sortie console ANSI via `console.log`, sans dépendances externes.",
    "technicalReflections": "Le singleton simplifie l’usage mais limite la flexibilité ; l’héritage aurait pu céder la place à la composition. Prochaine étape : ajout de transports fichier/HTTP.",
    "difficulties": "– Publication NPM et packaging (ESM vs CommonJS) ; \n– Choix héritage vs composition pour les clients logger ; \n– Conception d’une API riche et intuitive ; \n– Absence initiale de tests unitaires."
  },
  "color-generator": {
    "title": "Theme Color Generator",
    "summary": "Outil web pour générer dynamiquement des thèmes CSS avec aperçu en temps réel.",
    "description": "Permet de créer des palettes de couleurs personnalisées (HEX, RGB…), d’avoir un aperçu live et de générer automatiquement le code CSS associé.",
    "history": "Créé le 23 octobre 2023 pour centraliser la génération de thèmes CSS, mis à jour le 5 mai 2025 pour améliorer l’ergonomie et le design.",
    "architecture": "Entrypoint `main.ts` initialisant ColorsService, ColorsPaletteService, ThemeColorsService et ThemeDisplayService. Structure DDD avec `models`, `services`, `value-objects` et ThemeCSSGenerator, packagé via Webpack.",
    "technicalChoices": "TypeScript pour typage strict, HTML/CSS pour l’UI, Webpack+ts-loader pour bundling, architecture services/value-objects pour séparer logique métier et présentation.",
    "technicalReflections": "À l’avenir : proposer des exports Tailwind, templates de sortie (SCSS, JSON), CLI pour intégration CI/CD.",
    "difficulties": "Aucun défi majeur ; à améliorer : tests unitaires, workflow CI, prise en charge avancée des formats."
  },
  "portfolio": {
    "title": "Book 2023",
    "summary": "Portfolio web multi-pages responsive, avec animations et thèmes personnalisables.",
    "description": "Site statique multi-pages (landing, home, CV, compétences, projets GitHub) servi par un mini-serveur Node.js. Curseur personnalisé, theming via CSS variables, chargement dynamique des données projets.",
    "history": "Créé le 24 octobre 2023 comme template de portfolio, développé en quasi-one-shot sans mises à jour majeures ultérieures.",
    "architecture": "Architecture « multi-page » : chaque page (landing, home, CV, compétences, projets) est autonome (HTML/CSS/JS). `server.js` orchestre le routage et sert les fichiers, `main.js` gère le curseur, le thème et la redirection initiale.",
    "technicalChoices": "Vanilla JS/CSS pour légèreté et accès direct au DOM ; CSS variables pour theming ; mini-serveur Node.js maison sans Express.",
    "technicalReflections": "Pages autonomes faciles à maintenir, mais bundler (Webpack/Rollup) ou framework léger (Vite/Next.js) améliorerait le workflow ; SPA possible pour plus de fluidité.",
    "difficulties": "Curseur cross-browser, gestion fine des CSS variables et animations, redirection sans FOUC, structuration du mini-serveur."
  },
  "idlesaur": {
    "title": "The Idlesaur",
    "summary": "Idle game suivant la vie, les besoins et le karma d’un dinosaure virtuel avec boutique intégrée.",
    "description": "Full-stack idle game : frontend React 18, backend Express/TypeScript, persistance MariaDB. Gestion faim, XP et karma en cycles de 20 minutes, événements aléatoires et boutique interne.",
    "history": "Développé de 2024 à 2025 pour le BTS SLAM à Campus Eductive Toulon. Initialement un projet à trois, puis forké en perso pour finaliser modules gameplay et infra automatisée.",
    "architecture": "Architecture 3-tiers conteneurisée : frontend React 18, backend Express/TS, base MariaDB, orchestrés via Docker Compose avec provisioning Terraform sur AWS App Runner.",
    "technicalChoices": "React 18 + Express.js pour séparation client/serveur, TypeScript pour typage strict, Docker multi-stage, Terraform pour infra reproductible.",
    "technicalReflections": "SQL brut (mysql2) transparent, mais ORM (Prisma) accélérerait les migrations ; bus d’événements (Kafka/RabbitMQ) améliorerait le découplage.",
    "difficulties": "Implémentation d’un AuthService/AuthMiddleware interne robuste, configuration HTTPS AWS, backups RDS automatiques, pipeline CI/CD sans outil dédié."
  },
  "app-template": {
    "title": "App Template",
    "summary": "Template full-stack avec CLI, wizard desktop et infra-as-code.",
    "description": "Backend NestJS modulaire, frontend Angular 16, CLI « appwizard » et wizard desktop (Tauri + Rust). Services conteneurisés (PostgreSQL, Vault, MailHog, Ganache), provisionnés via Terraform sur AWS/GCP.",
    "history": "Fruit de plus de cinq ans d’itérations (anciennement Auth-Boilerplate), unifié en monorepo via submodules Git, développé 2024–2025 pour normes SLAM et déploiement automatisé.",
    "architecture": "Monorepo Git via submodules : backend NestJS + Prisma, frontend Angular PWA, services de support en Docker Compose, CLI/Tauri wizard pour l’installation.",
    "technicalChoices": "Passport-JWT & Guards dans NestJS, Prisma pour migrations, Angular PWA + Tailwind/SCSS, Solidity smart contracts, Docker + Terraform CI, Tauri/Rust pour UX native.",
    "technicalReflections": "Envisage de refondre l’auth du backend pour uniformiser les stratégies Passport et réécrire le frontend comme add-on Portfolio pour intégration pérenne.",
    "difficulties": "Monorepo volumineux, mises à jour Angular fréquentes, maintenance doc/code, orchestration zero-touch Terraform."
  },
  "memory-game": {
    "title": "Memory Game",
    "summary": "Jeu de mémoire React avec cartes emoji mélangées en grille.",
    "description": "Implémentation simple générant des paires emoji et affichant un message de victoire ou de défaite.",
    "history": "Initié le 22 octobre 2024 pour découvrir React et les composants fonctionnels. Version v1 stable mais minimaliste, sans démo publique.",
    "architecture": "Organisation “tout-en-vrac” dans `src/` : MemoryGame, Card, Controls, GameOver, sans structure claire – à refondre.",
    "technicalChoices": "Hooks fonctionnels React (useState, useEffect), animations CSS3 pour retournement, séparation en quatre composants pour la lisibilité.",
    "technicalReflections": "V1 stable mais nécessite réorganisation par feature, profils, niveaux de difficulté et stockage local des scores.",
    "difficulties": "Synchronisation flip/chrono sans bloquer l’UI, désactivation des clics pendant l’animation, gestion fiable de l’état GameOver."
  },
  "vf-robber": {
    "title": "VF Robber (Very Fast Robber)",
    "summary": "Appli desktop multiplateforme (Tauri) Angular+Rust pour renommage massif de fichiers et textes.",
    "description": "Refonte Angular 16/SCSS + Rust/Tauri d’un script Python de renommage. Copie source/destination, find/replace, renommage auto, progression live via événements IPC.",
    "history": "Reprise complète le 3 mai 2025, basé sur un PoC Python, fork perso pour finaliser modules et infra automatisée.",
    "architecture": "Monorepo Tauri+Angular : Rust (`src-tauri/`) gère FS et IPC, Angular (`src/app/`) configure et affiche la progression en temps réel.",
    "technicalChoices": "Tauri+Rust pour exécutable natif performant, Angular 16/SCSS pour l’UI, IPC haute fréquence pour UX fluide, mono-repo npm & Cargo.",
    "technicalReflections": "Preuve de concept Tauri/Angular pour refactoring de code. À venir : rapports CSV/JSON, mode CLI Rust pur, presets frameworks.",
    "difficulties": "Configuration Tauri Windows/macOS/Linux, IPC haute fréquence sans bloquer l’UI, gestion des fichiers verrouillés et permissions, packaging multiplateforme."
  }
}
